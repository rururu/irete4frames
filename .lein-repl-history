(require 'irete.core)
(in-ns 'irete.core)
(app "run" "examples/mab.clj")
iR
(seq iR)
(aget iR ANET)
@(aget iR ANET)
(aget iR ACNT)
(require 'irete.core)
(in-ns 'irete.core)
(app "run" "examples/mab.clj")
(require 'irete.core)
(in-ns 'irete.core)
(def mabs (slurp "examples/mab.clj"))
(def mab (read-string mabs)
)
(first mab)
( def tmp (rest (first mab)))
tmp
(def rls (rest (second mab)))
(def fct (rest (nth mab 3)))
rls
fct
(create-rete-image tmp rls fct)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
iR
ACNT
(aget iR ACNT)
@(aget iR ACNT)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(aget iR STRATEGY)
(tst)
(create-rete-image tmp rls fct)
(aget iR STRATEGY)
(aget iR TEMPL)
(aget iR ANET)
(aget iR ACNT)
(aget iR MINSAL)
(aget iR MAXSAL)
(aget iR BPLAN)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(aget iR ACNT)
(vswap! (aget iR ACNT) inc)
(aget iR ANET)
(count fct)
TRACE
(def TRACE true)
(create-rete-image tmp rls fct)
(load-file "src/irete/core.clj")
(def TRACE true)
(create-rete-image tmp rls fct)
(load-file "src/irete/core.clj")
(def TRACE true)
(create-rete-image tmp rls fct)
(load-file "src/irete/core.clj")
(def TRACE true)
(create-rete-image tmp rls fct)
git remote add origin https://github.com/rururu/irete4frames.git
(require 'irete.core)
(in-ns 'irete.core)
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(run)
(create-rete-image tmp rls fct)
(run)
(create-rete-image tmp rls fct)
(def TRACE true)
(run)
(create-rete-image tmp rls fct)
(def TLONG true)
(run)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(create-rete-image tmp rls fct)
(run)
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
BMEM
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(aget (aget iR ABLINK) 2)
(first (aget (aget iR AMEM) 2))
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(list 2 (aget (aget iR BNET) 2) (aget (aget iR BMEM) 2))
(aget (aget iR BNET) 2)
(aget (aget iR BMEM) 2)
(aget iR BMEM)
(seq (aget iR BMEM))
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(load-file "src/irete/core.clj")
(tst)
(create-rete-image tmp rls fct)
(run)
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(app "run" "examples/waltz.clj")
(tst "run" "examples/waltz.clj")
(tst "examples/waltz.clj")
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
))
)))
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/mab.clj")
(tst "examples/waltz.clj")
(tst "examples/zebra.clj")
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
fun
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(tst "examples/waltz.clj")
fun
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
*ns*
(in-ns 'irete.core)
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
*ns*
(in-ns 'irete.core)
(tst "examples/waltz.clj")
(load-file "src/irete/core.clj")
(tst "examples/waltz.clj")
(tst "examples/mab.clj")
(load-file "src/irete/core.clj")
(tst "examples/mab.clj")
(tst "examples/waltz.clj")
(tst "examples/manners.clj")
(require 'irete.core)
(in-ns 'irete.core)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/manners.clj" true true true)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step)
(step 10)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(count (second (first @(aget iR CFSET))))
(count @(aget iR CFSET))
(count (first @(aget iR CFSET)))
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(count (second (first @(aget iR CFSET))))
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(count (second (first @(aget iR CFSET))))
(step)
(count (second (first @(aget iR CFSET))))
(step)
(count (second (first @(aget iR CFSET))))
@(aget iR CFSET)
(step)
@(aget iR CFSET)
(step)
@(aget iR CFSET)
(step 10)
@(aget iR CFSET)
(step 5)
@(aget iR CFSET)
(step)
@(aget iR CFSET)
(step)
(count (second (first @(aget iR CFSET))))
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(count (second (first @(aget iR CFSET))))
(step)
(count (second (first @(aget iR CFSET))))
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true true true)
(step 20)
(step)
(aget iR  STRATEGY) 
(aset iR  STRATEGY 'DEPTH) 
(aget iR STRATEGY)
(tst "examples/manners.clj" true true true)
(aget iR STRATEGY)
(aset iR  STRATEGY 'DEPTH) 
(aget iR STRATEGY)
(step 20)
(run)
(tst "examples/manners.clj" true false true)
(step 20)
(step 200)
(aget iR STRATEGY)
(tst "examples/manners.clj" true false true)
(aget iR STRATEGY)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" true false true)
(aget iR STRATEGY)
(load-file "src/irete/core.clj")
(aget iR STRATEGY)
(tst "examples/manners.clj" true false true)
(aget iR STRATEGY)
(load-file "src/irete/core.clj")
(aget iR STRATEGY)
(tst "examples/manners.clj" true false true)
(aget iR STRATEGY)
(step 200)
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/manners.clj" false false false)
(def a (object-array 4))
(aset 0 a [21 76 15])
(aset a 0 [21 76 15])
a
(seq a)
(def b (Arrays/copyOf a (count a)))
(def b (java.util.Arrays/copyOf a (count a)))
b
(seq b)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(require 'irete.core)
(in-ns 'irete.core)
(tst)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(tst "examples/mab.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/mab.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/mab.clj" false false false)
(aget iR STRATEGY)
(tst "examples/mab.clj" true true true)
(step)
(step 20)
(require 'irete.core)
(in-ns 'irete.core)
(tst "examples/mab.clj" true true true)
(step 20)
(load-file "src/irete/core.clj")
(tst "examples/mab.clj" true true true)
(step 20)
(step)
(aget iR  STRATEGY)
(aget iR BMEM)
(seq (aget iR BMEM))
(load-file "src/irete/core.clj")
(tst "examples/mab.clj" true true true)
(step 100)
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(time (+ 2 3))
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false false)
(tst "examples/manners.clj" false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false)
(load-file "src/irete/core.clj")
(tst "examples/manners.clj" false false)
(load-file "src/irete/core.clj")
(tst "examples/imanners.clj" false false)
(load-file "src/irete/core.clj")
(tst "examples/imanners.clj" false false)
(load-file "src/irete/core.clj")
(tst 1 "examples/imanners.clj" false false)
(tst 4 "examples/imanners.clj" false false)
(tst 100 "examples/imanners.clj" false false)
(tst 1 "examples/imanners.clj" false false)
(load-file "src/irete/core.clj")
(tst 1 "examples/imanners.clj" false false)
(tst 10 "examples/imanners.clj" false false)
(tst 100 "examples/imanners.clj" false false)
(tst 200 "examples/imanners.clj" false false)
(def PP [])
(tst 1 "examples/imanners.clj" false false)
PP
(def PP [])
(tst 2 "examples/imanners.clj" false false)
PP
(def PP [])
(tst 200 "examples/imanners.clj" false false)
(load-file "src/irete/core.clj")
(def PP [])
(tst 2 "examples/imanners.clj" false false)
PP
(count PP)
(def PP [])
(tst 200 "examples/imanners.clj" false false)
(count PP)
